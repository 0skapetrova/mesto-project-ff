
; 2. Перед стартом. Как сделать запрос к серверу 
; Адрес сервера проекта Mesto: https://mesto.nomoreparties.co. 
; При каждом запросе нужно передавать токен и идентификатор группы. Обратите внимание, что при запросе нужно передавать токен в заголовке authorization. Это необходимое условие. Если не передать серверу токен или передать неправильный — сервер ответит ошибкой. Делайте это в каждом запросе. 
; Идентификатор группы должен быть в URL сразу после части пути /v1/ Всегда обращайтесь к своей группе. Если обратиться к чужой, сервер вернёт ошибку.

; 3. Загрузка информации о пользователе с сервера 
; Информация о пользователе должна подгружаться с сервера. Чтобы осуществить это, сделайте GET-запрос на URL. cohortId замените на идентификатор вашей группы. При запросе не забудьте передать токен. Если запрос прошёл успешно, в ответе вы получите объект пользователя: 
; { 
;   "name": "Jacques Cousteau", 
;   "about": "Sailor, researcher", 
;   "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg", 
;   "_id": "e20537ed11237f86bbb20ccb", 
;   "cohort": "cohort0" 
; }  
; Используйте свойства name, about и avatar в соответствующих элементах шапки страницы. Свойство _id — идентификатор пользователя, в данном случае вашего

; 4. Загрузка карточек с сервера 
; Начальные карточки должны подгружаться с сервера. Для этого сделайте GET-запрос: 
; GET https://nomoreparties.co/v1/cohortId/cards  
; В ответ придёт JSON с массивом карточек, которые загрузили студенты вашей группы. Используйте этот массив при отображении предзагруженных карточек, а от предыдущего способа отображения первоначальных карточек избавьтесь. 
; У каждой карточки есть свойства name и link — это заголовок и ссылка на картинку — они понадобятся при отображении каждой отдельной карточки. 
; Как видите, у карточки также есть идентификатор — свойство _id. Сейчас он вам не нужен, но скоро понадобится. 
; Обратите внимание, что для правильного отображения состояния кнопок лайка и удаления карточек необходимо знать _id пользователя. Его мы получаем только в ответе на запрос данных пользователя, и отображать карточки на странице следует только после его получения. Поэтому для загрузки данных пользователя и карточек необходимо воспользоваться методом Promise.all(). В него передается массив промисов, которые должны быть выполнены, т.е. наши запросы, а в блок .then мы попадем когда оба запроса будут выполнены. Тем самым это гарантирует, что у нас будет сразу и массив карточек и _id пользователя для их отображения.

; 5. Редактирование профиля 
; Отредактированные данные профиля должны сохраняться на сервере. Для этого отправьте запрос методом PATCH. В заголовках запроса, кроме токена, необходимо отправить Content-Type, а в теле — JSON с двумя свойствами — name и about. Значениями этих свойств должны быть обновлённые данные пользователя.  Если обновление прошло успешно, в теле ответа от сервера вы получите обновлённые данные пользователя. Метод PATCH обычно используют для обновления сущностей, уже существующих на сервере. Обновление информации о пользователе — именно такой случай: пользователь уже есть, нужно просто обновить его данные.

; 6. Добавление новой карточки 
; Чтобы добавить на сервер новую карточку, отправьте POST-запрос .В заголовках запроса, кроме токена, необходимо отправить Content-Type, а в теле — JSON с двумя свойствами — name и link. В name должно быть название создаваемой карточки, а в link — ссылка на картинку. Если запрос прошёл успешно, сервер вернёт ответ с объектом новой карточки.

7. Отображение количества лайков карточки 
У каждой карточки есть свойство likes — оно содержит массив пользователей, лайкнувших карточку. Сделайте так, чтобы на каждой карточке было написано, сколько у неё лайков. Для этого придётся сверстать дополнительный элемент. Его дизайн есть в Figma.

8. Удаление карточки 
Прежде чем браться за работу с API, исправьте элемент карточки. Сделайте так, чтобы иконка удаления была только на созданных вами карточках, так как удалять чужие карточки нельзя. Если карточка создана не вами, на ней нет иконки корзины 
После этого реализуйте функциональность удаления карточки. Карточка должна удаляться, если в попапе удаления карточки пользователь нажал «Да». 
Чтобы удалить карточку, отправьте DELETE-запрос.Вместо cardId в URL нужно подставить параметр _id карточки, которую нужно удалить. _id каждой карточки есть в её JSON

9. Постановка и снятие лайка 
Чтобы лайкнуть карточку, отправьте PUT-запрос.Чтобы убрать лайк, нужно отправить DELETE-запрос с тем же URL.Вместо cardId в URL нужно подставить свойство _id соответствующей карточки. 
В ответе придёт обновлённый JSON с карточкой. Массив лайков в нём будет уже обновлён. 
При постановке и снятии лайка сердечко должно менять цвет, а счётчик лайков увеличиваться или уменьшаться. 
Чтобы изменить количество лайков, нужно отправить на сервер запрос с соответствующим методом. Рекомендуем брать количество лайков из ответа сервера, а не из вёрстки. Иначе могут возникнуть ошибки, когда два пользователя одновременно лайкнут одну карточку.

; 10. Обновление аватара пользователя 
; Чтобы сменить аватар, отправьте такой PATCH-запрос: 
; PATCH https://nomoreparties.co/v1/cohortId/users/me/avatar  
; В теле запроса передайте JSON с единственным свойством — avatar. Это свойство должно хранить ссылку на новый аватар. Если отправить не ссылку, сервер вернёт ошибку. 
; При наведении указателя мыши на аватар, на нём должна появляться иконка редактирования. А при клике — открываться форма. Эту форму нужно сделать. В ней должно быть одно поле — ссылка на новый аватар. Иконка редактирования аватара и форма загрузки есть в Figma. 
; Хоть в этой форме и всего одно поле, но его тоже необходимо валидировать: 
; Поле обязательное 
; Поле содержит именно URL в корректном формате 
; Опционально, если хотите потренироваться, можете проверить, что это именно URL на изображение, и он действительный. Для этого вам потребуется сделать запрос с методом HEAD по этому адресу и проверить статус ответа и mime-тип в заголовках.

11. Улучшенный UX всех форм 
Поработайте над UX. При редактировании профиля уведомите пользователя о процессе загрузки, поменяв текст кнопки на: «Сохранение...», пока данные загружаются

12. Требования к коду интеграции с API 
Для работы с API создайте файл api.js. Все запросы присвойте переменным и экспортируйте их. В других модулях вы сможете импортировать эти функции и вызывать их. Вот небольшой пример того, как можно обустроить код в файле api.js

14. Дополнительно. Попап удаления карточки 
Это дополнительное задание — выполнять его не обязательно. Но если решитесь, его придётся доделать до конца и без ошибок. В случае ошибки ревьюер вернёт на доработку весь проект. Если вы не уверены в том, как реализуется эта функциональность, но хотите попробовать свои силы, мы рекомендуем выполнить это задание в отдельной ветке Git. Таким образом этот код не попадёт на проверку. Когда будете уверены, что всё работает корректно, — смёржите отдельную ветку с main. Но сначала разберём само задание. 
Удаление чего-то, как правило, безвозвратно. Поэтому перед этим действием стоит спросить пользователя, уверен ли он, что хочет удалить карточку. Для этого сделайте новый попап. Он должен открываться по клику на иконку удаления

Деплой на GitHub Pages 
Сейчас в репозиторий загружены исходные файлы вашего проекта, но вам нужно собрать их и уже в собранном виде опубликовать для конечного пользователя. 
Проблема с приватным репозиторием 
Приватный репозиторий скрывает проект, чтобы только вы могли его видеть. Чтобы выложить сайт в интернет, сделайте репозиторий публичным. Когда все требования выполнены, следуйте инструкции из урока GitHub Pages и деплой проекта. Учтите, что сейчас на бесплатных аккаунтах может быть опубликован только один проект. Когда опубликуете следующий, этот перестанет быть доступен. 
Mesto выходит в свет 
Вы создали специальный файл в корне проекта для того, чтобы GitHub Pages смог прочитать пути, начинающиеся с _. В ветку gh-pages попал ваш код из папки dist ветки main. Он размещён на GitHub Pages и доступен всему миру по ссылке

