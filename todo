1. Настройка сборки Webpack
    ; Для этого нужно пройти по шагам: 
    ; Инициализировать npm в проекте.
    ; Установить webpack, webpack-cli и webpack-dev-server.
    ; Настроить две сборки: build **и dev. Создайте соответствующие скрипты в package.json. Скрипт build должен пересоздавать папку dist с собранным проектом. Скрипт dev — запускать проект на локальном сервере.
    ; Настроить минификацию и транспиляцию JS бабелем. Из index.html уберите теги script с подключением скриптов. Webpack должен собирать весь JavaScript в один файл и автоматически добавлять в HTML тег script со ссылкой на него.
    ; Настроить обработку CSS: в HTML больше не должно быть тега link со ссылкой на CSS-файл. За обработку и подключение CSS должен отвечать Webpack.
    ; Настроить минификацию CSS и автоматическое добавление вендорных префиксов.
    Настроить обработку изображений и шрифтов.
    Настроить обработку HTML: если в HTML есть ссылки на локальные картинки, при сборке всё должно работать.
    HTML-, CSS- и JS-файлы следует хранить в папке src. 


3. Работа модальных окон
    Открытие и закрытие модального окна
        В проекте есть три модальных окна. Они открываются по нажатию кнопок «Редактировать» и «+» и при нажатии на картинку, а закрываются — при клике по крестику в правом верхнем углу:
    Механизм открытия и закрытия попапа
        Отслеживайте клик по кнопке методом addEventListener
        Закрытие попапа кликом на оверлей
            Дайте пользователям возможность закрывать любой попап кликом на оверлей:
        Попап закрывается кликом на тёмный фон
        Закрытие попапа нажатием на Esc
            Дайте пользователям возможность закрывать любой попап нажатием на клавишу Esc. Обратите внимание что обработчик события должен добавляться при открытии окна и удаляться после закрытия.
4. Редактирование имени и информации о себе
    При открытии формы поля «Имя» и «О себе» должны быть заполнены теми значениями, которые отображаются на странице.

    Если пользователь закрывает модальное окно нажав на крестик, то введённые значения не сохраняются. О том, как работает кнопка «Сохранить», расскажем дальше.
    Открытия и закрытия модального окна недостаточно. Как следует из названия попапа, он должен уметь редактировать соответствующие поля страницы. После изменений и нажатия кнопки «Сохранить» информация на странице должна обновиться, а попап автоматически закрыться:
Изменение страницы через попап
    Реализуйте обработчик события submit при отправке формы по следующему шаблону. Мы оставили в коде комментарии, которые с этим помогут:
            // Находим форму в DOM
            const formElement = // Воспользуйтесь методом querySelector()
            // Находим поля формы в DOM
            const nameInput = // Воспользуйтесь инструментом .querySelector()
            const jobInput = // Воспользуйтесь инструментом .querySelector()

            // Обработчик «отправки» формы, хотя пока
            // она никуда отправляться не будет
            function handleFormSubmit(evt) {
                evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.
                                                            // Так мы можем определить свою логику отправки.
                                                            // О том, как это делать, расскажем позже.

                // Получите значение полей jobInput и nameInput из свойства value

                // Выберите элементы, куда должны быть вставлены значения полей

                // Вставьте новые значения с помощью textContent
            }

            // Прикрепляем обработчик к форме:
            // он будет следить за событием “submit” - «отправка»
            formElement.addEventListener('submit', handleFormSubmit); 
            Пока эта информация не сохраняется между перезагрузками страницы. Мы научимся сохранять её позже, когда подключим сайт к серверу.
5. Форма добавления карточки
    Все необходимые формы уже есть в вёрстке, которую вы получили с шаблоном на первом этапе. Если понадобится, то их внешний вид можно сверить с макетом в «Фигме».
    Сделайте так, чтобы форма открывалась нажатием на кнопку «+»:
6. Добавление карточки
    Дайте пользователю возможность добавлять карточки:
        Можно написать имя карточки и дать ссылку на картинку
    Сделайте так, чтобы при клике на «Сохранить» новая карточка попадала в начало контейнера с ними. А диалоговое окно после добавления автоматически закрывалось и очищалась форма.
        Чтобы создавать новые карточки, добавьте обработчик событий submit, как в прошлом спринте, когда вы настраивали редактирование информации о пользователе.
7. Лайк карточки
    Сделайте так, чтобы карточки можно было лайкать:
        Если лайкнуть карточку, сердечко поменяет цвет
        Обратите внимание что функцию обработчика лайка нужно передать в функцию создания карточки как аргумент. Это понадобится в будущем для интеграции с API. 
8. Открытие попапа с картинкой
    Настройте просмотр фотографий. Пусть открываются нажатием на картинку:
        Функцию, которая обрабатывает клик по изображению, нужно, как и лайк, передать аргументом в функцию создания карточки.  
9. Плавное открытие и закрытие попапов
    Сделайте так, чтобы все попапы открывались плавно. Пусть проявляются из прозрачности и уходят в неё при закрытии:
        Свойство display:none не позволит сделать плавное переключение между состояниями карточек. Нужно что-то придумать.
            Подсказка
                В CSS-коде, который вы получили, уже есть необходимый класс, найдите его и используйте.
10. Требования к коду
Общие требования
    В этом месяце мы будем пристальнее следить, как объявлены переменные и как код разбит на функции. Старайтесь делать так, чтобы каждая функция выполняла только одно действие. Активно используйте параметры функций — это поможет производить действия над конкретными элементами DOM.
Требования к модульности
    К этому моменту вы напишете много разных функций. Если собрать их в одном файле index.js — читать его будет сложно не только вам, но и наставнику или код-ревьюерам. Поэтому код следует разделить на разные модули. Создайте отдельную директорию для хранения скриптов внутри директории src/, можете назвать её components/. Разбейте функции по нескольким файлам.
        Функции для работы с карточками проекта Mesto вынесите в файл card.js, из него должна экспортироваться функция createCard, которую вы создали раньше (у вас она может называться по-другому). Функции, обрабатывающие события лайка и удаления карточки, также должны находиться в этом файле и экспортироваться из него.
        Работу модальных окон — в файл modal.js. Оттуда экспортируйте функции openModal и closeModal, принимающие в качестве аргумента DOM-элемент модального окна, с которым нужно произвести действие.
    В файле index.js должны остаться:
        объявления и инициализация глобальных констант и переменных с DOM-элементами страницы,
        обработчики событий (при открытии и закрытии попапов; при отправке форм; обработчик, открывающий попап при клике по изображению карточки);
        вызовы других функций, подключённых из созданных модулей, которым нужно будет передавать объявленные здесь переменные и обработчики.
    Код модулей должен быть написан так, чтобы их можно быть забрать из проекта и перенести в другой без необходимости что-то менять внутри. Подумайте, какие настройки для этого нужно передать аргументами.
    Чтобы было чуточку понятнее: вызов функции создания карточки должен находиться в файле index.js, но само объявление функции — в card.js. Используйте директивы export/import.